<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSS - Jerry's Blog</title>
    <description>Jerry's Blog - This is Jerry's Blog</description>
    <link>http://xiajie.me</link>
    <atom:link href="http://xiajie.me/page/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 20 Oct 2014 08:43:06 +0800</pubDate>
    <lastBuildDate>Mon, 20 Oct 2014 08:43:06 +0800</lastBuildDate>
    <generator>Jerry Hsia</generator>
    
      <item>
        <title>Nginx反向代理和负载均衡</title>
        <description>&lt;p&gt;反向代理，从192.168.160.100:8080获取php的请求&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;location ~ &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;php&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    proxy_pass 192.168.160.100:8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;负载均衡，在http模块中加入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;upstream server_group &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   server 192.168.160.100:8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   server 192.168.160.101:8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#以上实现两台服务器均衡，如果要分配权重，可如下配置&lt;/span&gt;
upstream server_group &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   server 192.168.160.100:8080 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   server 192.168.160.101:8080 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#两次无响应则将服务器踢出&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在server中加入&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;location ~ &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;php&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    proxy_pass http://server_group&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#这里的名字和上面的server_group的名字相同&lt;/span&gt;
    proxy_redirect off&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/39.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/39.html</guid>
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>Linux配置静态IP</title>
        <description>
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/network/interfaces&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;添加以下内容：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;auto eth0  
iface eth0 inet static  
address 192.168.1.188  
gateway 192.168.1.1  
netmask 255.255.255.0
sudo ifconfig eth0 down  
sudo ifconfig eth0 up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;配置DNS ：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/resolv.conf
&lt;span class=&quot;c&quot;&gt;# Generated by NetworkManager  &lt;/span&gt;
nameserver 192.168.1.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo /etc/init.d/networking restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 23 Sep 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/38.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/38.html</guid>
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>vi编辑器的常用配置</title>
        <description>&lt;p&gt;Mac OS系统自带的vi编译器没有配置语法高亮，这在编辑查找时相当不方便，使用下面的方法解决这个问题。&lt;/p&gt;

&lt;p&gt;1、打开terminal，输入下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/share/vim
sudo vim vimrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、编辑配置文件&lt;/p&gt;

&lt;p&gt;在set backspace=2所在行后面新建一行，并加上：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ai                &lt;span class=&quot;s2&quot;&gt;&amp;quot; 自动缩进&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;set history=100       &amp;quot;&lt;/span&gt; 历史记录保存数
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;nu                &lt;span class=&quot;s2&quot;&gt;&amp;quot; 显示行号&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;set hlsearch          &amp;quot;&lt;/span&gt; 搜索结果高亮显示
syntax on             &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; 语法高亮&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3、保存文件退出，并再次键入sudo vim vimrc命令，已经高亮了，更多的设置请查看other资料。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 May 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/37.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/37.html</guid>
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>编译安装PHP扩展</title>
        <description>&lt;p&gt;之前主要是在windows平台上做开发，现在把开发平台转移到了mac平台上，发现安装扩展不像windows那样方便，之前也在mac上编译安装过，时间久了也忘记了，这里做个备份。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;1、首先要安装autoconf。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://ftp.gnu.org/gnu/autoconf/&quot; title=&quot;http://ftp.gnu.org/gnu/autoconf/&quot;&gt;http://ftp.gnu.org/gnu/autoconf/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压并进入autoconf目录，依次执行如下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2、安装mcrpty扩展。&lt;/p&gt;

&lt;p&gt;Mcrypt是一个功能强大的加密算法扩展库，它持20多种加密算法和8种加密模式。Mac OS X中，需要先安装这个库然后再安装PHP扩展。&lt;/p&gt;

&lt;p&gt;首先是下载扩展库的源文件，下载地址：&lt;a href=&quot;http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/&quot; title=&quot;http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/&quot;&gt;http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载到本地之后，解压缩，进入目录，请依次执行如下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./configure --disable-posix-threads --enable-static
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装好扩展库之后，下载PHP的源代码，（php -v 命令查看版本，我的是5.4.24）。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://cn2.php.net/get/php-5.4.24.tar.bz2/from/a/mirror&quot; title=&quot;http://cn2.php.net/get/php-5.4.24.tar.bz2/from/a/mirror&quot;&gt;http://cn2.php.net/get/php-5.4.24.tar.bz2/from/a/mirror&lt;/a&gt;&lt;br /&gt;
完成下载之后，请解包进入代码目录，再cd ext/mcrypt/，然后依次执行如下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;phpize
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;正确完成安装之后，会显示说明&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Installing shared extensions:     /usr/lib/php/extensions/no-debug-non-zts-20100525/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编辑/etc/php.ini文件，加入如下配置行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/php/extensions/no-debug-non-zts-20100525/mcrypt.so&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：在mac mavericks下可能有下列问题&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;grep: /usr/include/php/main/php.h: No such file or directory

grep: /usr/include/php/Zend/zend_modules.h: No such file or directory

grep: /usr/include/php/Zend/zend_extensions.h: No such file or directory

Configuring &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;:

PHP Api Version:

Zend Module Api No:

Zend Extension Api No:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include /usr/include&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 17 May 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/36.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/36.html</guid>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>RESTful API 设计最佳实践</title>
        <description>&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前互联网上充斥着大量的关于RESTful API（为了方便，以后API和RESTful API 一个意思）如何设计的文章，然而却没有一个”万能“的设计标准：如何鉴权？API格式如何？你的API是否应该加入版本信息？当你开始写一个app的时 候，特别是后端模型部分已经写完的时候，你不得不殚精竭虑的设计和实现自己app的public API部分。因为一旦发布，对外发布的API将会很难改变。&lt;/p&gt;

&lt;p&gt;在给SupportedFu设计API的时候，我试图以实用的角度来解决上面提到的问题。我希望可以设计出容易使用，容易部署，并且足够灵活的API，本文因此而生。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API设计的基本要求&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网 上的很多关于API设计的观点都十分”学院派“，它们也许更有理论基础，但是有时却和现实世界脱轨（因此我是自由派）。所以我这篇文章的目标是从实践的角 度出发，给出当前网络应用的API设计最佳实践（当然，是我认为的最佳了~），如果觉得不合适，我不会遵从标准。当然作为设计的基础，几个必须的原则还是 要遵守的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;当标准合理的时候遵守标准。
API应该对程序员友好，并且在浏览器地址栏容易输入。
API应该简单，直观，容易使用的同时优雅。
API应该具有足够的灵活性来支持上层ui。
API设计权衡上述几个原则。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要强调的是：API的就是程序员的UI，和otherUI一样，你必须仔细考虑它的用户体验！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用RESTful URLs 和action&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;虽然前面我说没有一个万能的API设计标准。但确实有一个被普遍承认和遵守：RESTfu设计原则。它被Roy Felding提出（在他的”基于网络的软件架构“论文中第五章）。而REST的核心原则是将你的API拆分为逻辑上的资源。这些资源通过http被操作（GET ,POST,PUT,DELETE）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么我应该如何拆分出这些资源呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;显然从API用户的角度来看，”资源“应该是个名词。即使你的内部数据模型和资源已经有了很好的对应，API设计的时候你仍然不需要把它们一对一的都暴露出来。这里的关键是隐藏内部资源，暴露必需的外部资源。&lt;/p&gt;

&lt;p&gt;在SupportFu里，资源是 ticket、user、group。&lt;/p&gt;

&lt;p&gt;一旦定义好了要暴露的资源，你可以定义资源上允许的操作，以及这些操作和你的API的对应关系：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /tickets # 获取ticket列表
GET /tickets/12 # 查看某个具体的ticket
POST /tickets # 新建一个ticket
PUT /tickets/12 # 更新ticket 12.
DELETE /tickets/12 #删除ticekt 12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出使用REST的好处在于可以充分利用http的强大实现对资源的CURD功能。而这里你只需要一个endpoint：/tickets,再没有other什么命名规则和url规则了，cool！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这个endpoint的单数复数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个可以遵从的规则是：虽然看起来使用复数来描述某一个资源实例看起来别扭，但是统一所有的endpoint，使用复数使得你的URL更加规整。这让API使用者更加容易理解，对开发者来说也更容易实现。&lt;/p&gt;

&lt;p&gt;如何处理关联？关于如何处理资源之间的管理REST原则也有相关的描述：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /tickets/12/messages- Retrieves list of messages for ticket #12
GET /tickets/12/messages/5- Retrieves message #5 for ticket #12
POST /tickets/12/messages- Creates a new message in ticket #12
PUT /tickets/12/messages/5- Updates message #5 for ticket #12
PATCH /tickets/12/messages/5- Partially updates message #5 for ticket #12
DELETE /tickets/12/messages/5- Deletes message #5 for ticket #12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其 中，如果这种关联和资源独立，那么我们可以在资源的输出表示中保存相应资源的endpoint。然后API的使用者就可以通过点击链接找到相关的资源。如 果关联和资源联系紧密。资源的输出表示就应该直接保存相应资源信息。（例如这里如果message资源是独立存在的，那么上面 GET /tickets/12/messages就会返回相应message的链接；相反的如果message不独立存在，他和ticket依附存在，则上面的 API调用返回直接返回message信息）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不符合CURD的操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对这个令人困惑的问题，下面是一些解决方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;重构你的行为action。当你的行为不需要参数的时候，你可以把active对应到activated这个资源，（更新使用patch）.
以子资源对待。例如:GitHub上，对一个gists加星操作：PUT /gists/:id/star 并且取消星操作：DELETE /gists/:id/star.
有时候action实在没有难以和某个资源对应上例如search。那就这么办吧。我认为API的使用者对于/search这种url也不会有太大意见的（毕竟他很容易理解）。只要注意在文档中写清楚就可以了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;永远使用SSL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;毫无例外，永远都要使用SSL。你的应用不知道要被谁，以及什么情况访问。有些是安全的，有些不是。使用SSL可以减少鉴权的成本：你只需要一个简单的令牌（token）就可以鉴权了，而不是每次让用户对每次请求签名。&lt;/p&gt;

&lt;p&gt;值得注意的是：不要让非SSL的url访问重定向到SSL的url。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文 档和API本身一样重要。文档应该容易找到，并且公开（把它们藏到pdf里面或者存到需要登录的地方都不太好）。文档应该有展示请求和输出的例子：或者以 点击链接的方式或者通过curl的方式（请见openstack的文档）。如果有更新（特别是公开的API），应该及时更新文档。文档中应该有关于何时弃 用某个API的时间表以及详情。使用邮件列表或者博客记录是好方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;版本化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在API上加入版本信息可以有效的防止用户访问已经更新了的API，同时也能让不同主要版本之间平稳过渡。关于是否将版本信息放入url还是放入请求头有过争论：API version should be included in the URL or in a header. 学术界说它应该放到header里面去，但是如果放到url里面我们就可以跨版本的访问资源了。。（参考openstack）。&lt;/p&gt;

&lt;p&gt;strip使用的方法就很好：它的url里面有主版本信息，同时请求头俩面有子版本信息。这样在子版本变化过程中url的稳定的。变化有时是不可避免的，关键是如何管理变化。完整的文档和合理的时间表都会使得API使用者使用的更加轻松。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结果过滤，排序，搜索：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;url最好越简短越好，和结果过滤，排序，搜索相关的功能都应该通过参数实现(并且也很容易实现)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;过滤：&lt;/strong&gt;为所有提供过滤功能的接口提供统一的参数。例如：你想限制get /tickets 的返回结果:只返回那些open状态的ticket–get /tickektsstate=open这里的state就是过滤参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;排序：&lt;/strong&gt;和过滤一样，一个好的排序参数应该能够描述排序规则，而不业务相关。复杂的排序规则应该通过组合实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /ticketssort=-priority- Retrieves a list of tickets in descending order of priority
GET /ticketssort=-priority,created_at- Retrieves a list of tickets in descending order of priority. Within a specific priority, older tickets are ordered first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里第二条查询中，排序规则有多个rule以逗号间隔组合而成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;搜索：&lt;/strong&gt;有些时候简单的排序是不够的。我们可以使用搜索技术（ElasticSearch和Lucene）来实现（依旧可以作为url的参数）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /ticketsq=return&amp;amp;state=open&amp;amp;sort=-priority,created_at- Retrieve the highest priority open tickets mentioning the word ‘return’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于经常使用的搜索查询，我们可以为他们设立别名,这样会让API更加优雅。例如：&lt;/p&gt;

&lt;p&gt;get /ticketsq=recently_closed -&amp;gt; get /tickets/recently_closed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;限制API返回值的域&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时候API使用者不需要所有的结果，在进行横向限制的时候（例如值返回API结果的前十项）还应该可以进行纵向限制。并且这个功能能有效的提高网络带宽使用率和速度。可以使用fields查询参数来限制返回的域例如：&lt;br /&gt;
GET /ticketsfields=id,subject,customer_name,updated_at&amp;amp;state=open&amp;amp;sort=-updated_at&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新和创建操作应该返回资源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PUT、 POST、PATCH 操作在对资源进行操作的时候常常有一些副作用：例如created_at,updated_at 时间戳。为了防止用户多次的API调用（为了进行此次的更新操作），我们应该会返回更新的资源（updated representation.）例如：在POST操作以后，返回201 created 状态码，并且包含一个指向新资源的url作为返回头&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是否需要 “HATEOAS&lt;/strong&gt;“&lt;/p&gt;

&lt;p&gt;网上关于是否允许用户创建新的url有很大的异议（注意不是创建资源产生的url）。为此REST制定了HATEOAS来描述了和endpoint进行交互的时候，行为应该在资源的metadata返回值里面进行定义。&lt;/p&gt;

&lt;p&gt;（译注：作者这里认为HATEOAS还不算成熟，我也不怎么理解这段就算了，读者感兴趣可以自己去原文查看）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;只提供json作为返回格式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在开始比较一下XML和json了。XML即冗长，难以阅读，又不适合各种编程语言解析。当然XML有扩展性的优势，但是如果你只是将它来对内部资源串行化，那么他的扩展优势也发挥不出来。很多应用（youtube,twitter,box）都已经开始抛弃XML了，我也不想多费口舌。给了google上的趋势图吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vinaysahni.com/images/201305-xml-vs-json-api.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当 然如果的你使用用户里面企业用户居多，那么可能需要支持XML。如果是这样的话你还有另外一个问题：你的http请求中的media类型是应该和 accept 头同步还是和url？为了方便（browser explorability）,应该是在url中(用户只要自己拼url就好了)。如果这样的话最好的方法是使用.xml或者.json的后缀。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;命名方式？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;是蛇形命令（下划线和小写）还是驼峰命名？如果使用json那么最好的应该是遵守JAVASCRIPT的命名方法-也就是说骆驼命名法。如果你正在使用多种语言写一个库，那么最好按照那些语言所推荐的，java，c#使用骆驼，python，ruby使用snake。&lt;/p&gt;

&lt;p&gt;个人意见：我总觉得蛇形命令更好使一些，当然这没有什么理论的依据。有人说蛇形命名读起来更快，能达到20%。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;默认使用pretty print格式，使用gzip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只 是使用空格的返回结果从浏览器上看总是觉得很恶心(一大坨有没有？～)。当然你可以提供url上的参数来控制使用“pretty print”，但是默认开启这个选项还是更加友好。格外的传输上的损失不会太大。相反你如果忘了使用gzip那么传输效率将会大大减少，损失大大增加。想 象一个用户正在debug那么默认的输出就是可读的-而不用将结果拷贝到other什么软件中在格式化-是想起来就很爽的事，不是么？&lt;/p&gt;

&lt;p&gt;下面是一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl &amp;lt;https://API.github.com/users/veesahni&amp;gt; &amp;gt; with-whitespace.txt
$ ruby -r json -e &#39;puts JSON JSON.parse(STDIN.read)&#39; &amp;lt; with-whitespace.txt &amp;gt; without-whitespace.txt
$ gzip -c with-whitespace.txt &amp;gt; with-whitespace.txt.gz
$ gzip -c without-whitespace.txt &amp;gt; without-whitespace.txt.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;without-whitespace.txt- 1252 bytes
with-whitespace.txt- 1369 bytes
without-whitespace.txt.gz- 496 bytes
with-whitespace.txt.gz- 509 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 上面的例子中，多余的空格使得结果大小多出了8.5%（没有使用gzip），相反只多出了2.6%。据说：twitter使用gzip之后它的 streaming API传输减少了80%（link:https://dev.twitter.com/blog/announcing-gzip- compression-streaming-APIs）.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;只在需要的时候使用“envelope”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多API象下面这样返回结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{  
  &quot;data&quot; : {  
    &quot;id&quot; : 123,  
    &quot;name&quot; : &quot;John&quot;  
  }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理 由很简单：这样做可以很容易扩展返回结果，你可以加入一些分页信息，一些数据的元信息等－这对于那些不容易访问到返回头的API使用者来说确实有用，但是 随着“标准”的发展（cors和http://tools.ietf.org/html/rfc5988#page-6都开始被加入到标准中了），我个人 推荐不要那么做。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;何时使用envelope？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有两种情况是应该使用envelope的。如果API使用者确实无法访问返回头，或者API需要支持交叉域请求（通过&lt;a href=&quot;http://blog.jobbole.com/18012/&quot;&gt;jsonp&lt;/a&gt;）。&lt;br /&gt;
jsonp请求在请求的url中包含了一个callback函数参数。如果给出了这个参数，那么API应该返回200，并且把真正的状态码放到返回值里面（包装在信封里），例如：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;status_code: 200,  
  next_page: &quot;https://..&quot;,  
  response: {  
    ... actual JSON response body ...   
  }  
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样为了支持无法方法返回头的API使用者，可以允许envelope=true这样的参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在post,put,patch上使用json作为输入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你认同我上面说的，那么你应该决定使用json作为所有的API输出格式，那么我们接下来考虑考虑API的输入数据格式。&lt;br /&gt;
很 多的API使用url编码格式：就像是url查询参数的格式一样：单纯的键值对。这种方法简单有效，但是也有自己的问题：它没有数据类型的概念。这使得程 序不得不根据字符串解析出布尔和整数,而且还没有层次结构–虽然有一些关于层次结构信息的约定存在可是和本身就支持层次结构的json比较一下还是不很好 用。&lt;/p&gt;

&lt;p&gt;当然如果API本身就很简单，那么使用url格式的输入没什么问题。但对于复杂的API你应该使用json。或者干脆统一使用json。&lt;br /&gt;
注意使用json传输的时候，要求请求头里面加入：Content-Type：applicatin/json.否则抛出415异常（unsupported media type）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分页&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分页数据可以放到“信封”里面，但随着标准的改进，现在我推荐将分页信息放到link header里面：http://tools.ietf.org/html/rfc5988#page-6。&lt;/p&gt;

&lt;p&gt;使用link header的API应该返回一系列组合好了的url而不是让用户自己再去拼。这点在基于游标的分页中尤为重要。例如下面，来自github的文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Link: &amp;lt;[https://api.github.com/user/repos?page=3&amp;amp;per_page=100][3]&amp;gt;; rel=&quot;next&quot;, 
&amp;lt;[https://api.github.com/user/repos?page=50&amp;amp;per_page=100][4]&amp;gt;; rel=&quot;last&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;自动加载相关的资源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多时候，自动加载相关资源非常有用，可以很大的提高效率。但是这却&lt;a href=&quot;http://idbentley.com/blog/2013/03/14/should-restful-apis-include-relationships/&quot;&gt;和RESTful的原则相背&lt;/a&gt;。为了如此，我们可以在url中添加参数：embed（或者expend）。embed可以是一个逗号分隔的串，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /ticket/12embed=customer.name,assigned_user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的API返回值如下：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;id&quot; : 12,  
  &quot;subject&quot; : &quot;I have a question!&quot;,  
  &quot;summary&quot; : &quot;Hi, ....&quot;,  
  &quot;customer&quot; : {  
    &quot;name&quot; : &quot;Bob&quot;  
  },  
  assigned_user: {  
   &quot;id&quot; : 42,  
   &quot;name&quot; : &quot;Jim&quot;,  
  }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得提醒的是，这个功能有时候会很复杂，并且可能导致N+1 SELECT 问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重写HTTP方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有的客户端只能发出简单的GET 和POST请求。为了照顾他们，我们可以重写HTTP请求。这里没有什么标准，但是一个普遍的方式是接受X-HTTP-Method-Override请求头。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;速度限制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了避免请求泛滥，给API设置速度限制很重要。为此 RFC 6585 引入了HTTP状态码429（too many requests）。加入速度设置之后，应该提示用户，至于如何提示标准上没有说明，不过流行的方法是使用HTTP的返回头。&lt;/p&gt;

&lt;p&gt;下面是几个必须的返回头（依照twitter的命名规则）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Rate-Limit-Limit :当前时间段允许的并发请求数
X-Rate-Limit-Remaining:当前时间段保留的请求数。
X-Rate-Limit-Reset:当前时间段剩余秒数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;为什么使用当前时间段剩余秒数而不是时间戳？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;时间戳保存的信息很多，但是也包含了很多不必要的信息，用户只需要知道还剩几秒就可以再发请求了这样也避免了clock skew问题。&lt;/p&gt;

&lt;p&gt;有些API使用UNIX格式时间戳，我建议不要那么干。为什么？HTTP 已经规定了使用 RFC 1123 时间格式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;鉴权 Authentication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;restful API是无状态的也就是说用户请求的鉴权和cookie以及session无关，每一次请求都应该包含鉴权证明。&lt;/p&gt;

&lt;p&gt;通 过使用ssl我们可以不用每次都提供用户名和密码：我们可以给用户返回一个随机产生的token。这样可以极大的方便使用浏览器访问API的用户。这种方 法适用于用户可以首先通过一次用户名-密码的验证并得到token，并且可以拷贝返回的token到以后的请求中。如果不方便，可以使用OAuth 2来进行token的安全传输。&lt;/p&gt;

&lt;p&gt;支持jsonp的API需要额外的鉴权方法，因为jsonp请求无法发送普通的credential。这种 情况下可以在查询url中添加参数：access_token。注意使用url参数的问题是：目前大部分的网络服务器都会讲query参数保存到服务器日 志中，这可能会成为大的安全风险。&lt;/p&gt;

&lt;p&gt;注意上面说到的只是三种传输token的方法，实际传输的token可能是一样的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP提供了自带的缓存框架。你需要做的是在返回的时候加入一些返回头信息，在接受输入的时候加入输入验证。基本两种方法：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ETag：&lt;/strong&gt;当 生成请求的时候，在HTTP头里面加入ETag，其中包含请求的校验和和哈希值，这个值和在输入变化的时候也应该变化。如果输入的HTTP请求包含IF- NONE-MATCH头以及一个ETag值，那么API应该返回304 not modified状态码，而不是常规的输出结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last-Modified：&lt;/strong&gt;和etag一样，只是多了一个时间戳。返回头里的Last-Modified：包含了 RFC 1123 时间戳，它和IF-MODIFIED-SINCE一致。HTTP规范里面有三种date格式，服务器应该都能处理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;出错处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;就 像html错误页面能够显示错误信息一样，API 也应该能返回可读的错误信息–它应该和一般的资源格式一致。API应该始终返回相应的状态码，以反映服务器或者请求的状态。API的错误码可以分为两部 分，400系列和500系列，400系列表明客户端错误：如错误的请求格式等。500系列表示服务器错误。API应该至少将所有的400系列的错误以 json形式返回。如果可能500系列的错误也应该如此。json格式的错误应该包含以下信息：一个有用的错误信息，一个唯一的错误码，以及任何可能的详 细错误描述。如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Something bad happened &amp;lt;img src=&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//blog.jobbole.com/wp-includes/images/smilies/icon_sad.gif&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; class=&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;wp-smiley&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;More details about the error here&amp;quot;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对PUT,POST,PATCH的输入的校验也应该返回相应的错误信息，例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Validation Failed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;first_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;First name cannot have fancy characters&amp;quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
       &lt;span class=&quot;nt&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
       &lt;span class=&quot;nt&quot;&gt;&amp;quot;field&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
       &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Password cannot be blank&amp;quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HTTP 状态码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; ok  - 成功返回状态，对应，GET,PUT,PATCH,DELETE.
&lt;span class=&quot;m&quot;&gt;201&lt;/span&gt; created  - 成功创建。
&lt;span class=&quot;m&quot;&gt;304&lt;/span&gt; not modified   - HTTP缓存有效。
&lt;span class=&quot;m&quot;&gt;400&lt;/span&gt; bad request   - 请求格式错误。
&lt;span class=&quot;m&quot;&gt;401&lt;/span&gt; unauthorized   - 未授权。
&lt;span class=&quot;m&quot;&gt;403&lt;/span&gt; forbidden   - 鉴权成功，但是该用户没有权限。
&lt;span class=&quot;m&quot;&gt;404&lt;/span&gt; not found - 请求的资源不存在
&lt;span class=&quot;m&quot;&gt;405&lt;/span&gt; method not allowed - 该http方法不被允许。
&lt;span class=&quot;m&quot;&gt;410&lt;/span&gt; gone - 这个url对应的资源现在不可用。
&lt;span class=&quot;m&quot;&gt;415&lt;/span&gt; unsupported media &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; - 请求类型错误。
&lt;span class=&quot;m&quot;&gt;422&lt;/span&gt; unprocessable entity - 校验错误时用。
&lt;span class=&quot;m&quot;&gt;429&lt;/span&gt; too many request - 请求过多。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 05 May 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/35.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/35.html</guid>
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>使用phpunit进行代码测试</title>
        <description>&lt;p&gt;测试这个词很久之前就已经听说了，平常写代码也没真正用上，大多是编写代码边刷新浏览器进行“目测”，这样总是不好的，自己写了的代码到最后并没有真正的把握。今天狠下心来，一定要去把测试工具弄下跑个测试，作为phper的一员，于是选择了著名的phpunit。&lt;/p&gt;

&lt;p&gt;phpunit官方网站：&lt;a href=&quot;http://phpunit.de/&quot; title=&quot;http://phpunit.de/&quot;&gt;http://phpunit.de/&lt;/a&gt;，phpunit详细请参考：&lt;a href=&quot;http://phpunit.de/manual/current/zh_cn/installation.html&quot; title=&quot;http://phpunit.de/manual/current/zh_cn/installation.html&quot;&gt;http://phpunit.de/manual/current/zh_cn/installation.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;安装&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一种方法：&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://phar.phpunit.de/phpunit.phar 
chmod +x phpunit.phar
mv phpunit.phar /usr/local/bin/phpunit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样phpunit就装好了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;第二种方法：&lt;/h2&gt;

&lt;p&gt;如果你用 Composer 来管理项目的依赖关系，只需要简单的在项目的 composer.json 文件中加上一个对 phpunit/phpunit 的依赖关系即可。下面是一个最小化的 composer.json 文件的例子，只定义了一个对 PHPUnit 4.0 的开发时(development-time)依赖：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;require-dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;phpunit/phpunit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.0.*&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;要通过 Composer 完成系统级的安装，可以运行：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;composer global require &lt;span class=&quot;s1&quot;&gt;&amp;#39;phpunit/phpunit=4.0.*&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;请确保 path 变量中包含有 ~/.composer/vendor/bin/。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt; 编写测试&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StackTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHPUnit_Framework_TestCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testPushAndPop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;array_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt; 运行测试：&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;phpunit StackTest.php

PHPUnit 4.0.17 by Sebastian Bergmann.

.

Time: &lt;span class=&quot;m&quot;&gt;44&lt;/span&gt; ms, Memory: 2.75Mb

OK &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;, &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; assertions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

</description>
        <pubDate>Tue, 22 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/34.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/34.html</guid>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>使用composer管理php包</title>
        <description>&lt;p&gt;在PHP包管理上面，PHP发展的很缓慢，导致的结果就是很少发现程序员会使用像PEAR这样的工具。相反，大多数开发人员会选择他们自己喜欢的框架来处理代码，比如DB交互、ORIM’S、Oauth、Amazon S3整合等。&lt;/p&gt;

&lt;p&gt;缺点就是在转换框架的时候（或者根本不需要返回使用框架）就感觉像在做噩梦，因为涉及到使用新工具，你必须重新学习里面的一切东西，而这并不简单。OK，Composer来帮助你解决这些问题。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;安装&lt;/h1&gt;

&lt;p&gt;Composer包含两大逻辑部分：一个是用来存储包，另一个是命令行应用程序，帮助你发现、下载、更新和分享代码。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/my/project  
curl -s http://getcomposer.org/installer &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; php&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在项目列表中，会有一个composer.phar文件，里面包含了所有逻辑代码行工具。你可以通过运行下面代码来确定是否安装成功。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;php composer.phar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;把这个文件移到bin目录下，它允许你简化命令。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo mv composer.phar /usr/bin/composer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;解析composer.json文件&lt;/p&gt;

&lt;p&gt;如果你是一名Ruby程序员，你会觉得这个文件跟Gemfile文件很相似，或者你是一个Node程序员，那么会觉得和package.json文件很像。同样，Composer会根据你的应用需求用composer.json文件来指定设置和封装。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;kriswallsmith/assetic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;vendor-dir&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;packages&amp;quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装依赖&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;composer install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 22 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/33.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/33.html</guid>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>Cocos2d-x学习笔记：02-屏幕适配</title>
        <description>&lt;p&gt;学习Cocos2d-x一段时间了，这几天将小例子代码移植到Android上发现不能全屏显示，代码中使用的尺寸是480*320，Android中屏幕分辨率是800*480，之前也大致听说移动平台屏幕尺寸适配很麻烦。今天查询了相关文档，发现Cocos2d-x已经做好了适配了，只需要通过简单设置即可，不知道这是不是最终方法，先小高兴一下。&lt;/p&gt;

&lt;p&gt;具体方法是通过CCEGLView的方法来设置&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;AppDelegate.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;HelloWorldScene.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;USING_NS_CC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationDidFinishLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// initialize director&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CCDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDirector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CCDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedDirector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CCEGLView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEGLView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CCEGLView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedOpenGLView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOpenGLView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEGLView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pEGLView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDesignResolutionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kResolutionExactFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//这里配置屏幕适配模式&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// turn on display FPS&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDisplayStats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// set FPS. the default value is 1.0/60 if you don&amp;#39;t call this&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAnimationInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create a scene. it&amp;#39;s an autorelease object&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CCScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// run&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runWithScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This function will be called when the app is inactive. When comes a phone call,it&amp;#39;s be invoked too&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationDidEnterBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CCDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedDirector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// if you use SimpleAudioEngine, it must be pause&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SimpleAudioEngine::sharedEngine()-&amp;gt;pauseBackgroundMusic();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this function will be called when the app is active again&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applicationWillEnterForeground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CCDirector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedDirector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// if you use SimpleAudioEngine, it must resume here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// SimpleAudioEngine::sharedEngine()-&amp;gt;resumeBackgroundMusic();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里贴上官方注释，说得很清楚：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Set the design resolution size.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @param width Design resolution width.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @param height Design resolution height.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @param resolutionPolicy The resolution policy desired, you may choose:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * [1] kResolutionExactFit Fill screen by stretch-to-fit: if the design resolution ratio of width to height is different from the screen resolution ratio, your game view will be stretched.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * [2] kResolutionNoBorder Full screen without black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two areas of your game view will be cut.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * [3] kResolutionShowAll  Full screen with black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two black borders will be shown.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDesignResolutionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResolutionPolicy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolutionPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 31 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/32.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/32.html</guid>
        
        <category>cocos2d-x</category>
        
      </item>
    
      <item>
        <title>Cocos2d-x学习笔记：01-开发环境搭建
</title>
        <description>&lt;p&gt;最近开始学习Cocos2d-x，首先就是搭建环境的问题了，官方最然已经发布了3.0版本，但我学习还是从2.X开始，主要是2.X学习资料比较丰富吧，搭建环境对最初学者来说大多是头疼事，自己也走了一些弯路，主要是版本的区别，搭建环境方式不同。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;我学习使用的版本是2.2.3，这里就针对这一版本来写一下详细的搭建过程(主要针对Windows和Android)。&lt;/p&gt;

&lt;p&gt;一、Windows平台&lt;/p&gt;

&lt;p&gt;1、从下载http://www.cocos2d-x.org/源码。&lt;/p&gt;

&lt;p&gt;2、下载安装Visual Studio。&lt;/p&gt;

&lt;p&gt;3、直接可打开Cocos2d-x目录下cocos2d-winrt.vc201*.sln，编译、运行。&lt;/p&gt;

&lt;p&gt;4、安装Python将Python根目录及Lib子目录加入环境变量。&lt;/p&gt;

&lt;p&gt;5、在Cocos2d-x目录下\tools\project-creator这里启动命令行输入一下命令生成各平台项目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python create_project.py -project MyGame -package me.xiajie.mygame -language cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MyGame是项目名，me.xiajie.mygame是包名。&lt;/p&gt;

&lt;p&gt;至此Windows环境算是搭建完成。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;二、Android平台&lt;/p&gt;

&lt;p&gt;Android平台就需要折腾了，博主也一样。&lt;/p&gt;

&lt;p&gt;1、下载安装JDK、Eclipse、Android SDK这不难吧。&lt;/p&gt;

&lt;p&gt;2、下载安装Android NDK(http://developer.android.com/sdk/ndk/index.html)。&lt;/p&gt;

&lt;p&gt;3、下载安装cygwin&lt;/p&gt;

&lt;p&gt;由于NDK编译代码时必须要用到make和gcc，所以你必须先搭建一个linux环境， cygwin是一个在windows平台上运行的unix模拟环境,它对于学习unix/linux操作环境，或者从unix到windows的应用程序移植，非常有用。通过它，你就可以在不安装linux的情况下使用NDK来编译C、C++代码了。安装后测试一下cygwin是不是已经安装好了。&lt;/p&gt;

&lt;p&gt;运行cygwin，在弹出的命令行窗口输入：cygcheck -c cygwin命令，会打印出当前cygwin的版本和运行状态，如果status是ok的话，则cygwin运行正常。&lt;/p&gt;

&lt;p&gt;然后依次输入gcc –v，g++ -v，make –v，gdb –v进行测试，如果都打印出版本信息和一些描述信息，非常高兴的告诉你，你的cygwin安装完成了！&lt;/p&gt;

&lt;p&gt;4、配置NDK环境变量&lt;/p&gt;

&lt;p&gt;(1)首先找到cygwin的安装目录，找到一个home&amp;lt;你的用户名&amp;gt;.bash_profile文件，我的是：E:\cygwin\home\Administrator.bash_profile，(注意：我安装的时候我的home文件夹下面神马都没有，解决 的办法：首先打开环境变量，把里面的用户变量中的HOME变量删掉，在E:\cygwin\home文件夹下建立名为Administrator的文件夹（是用户名），然后把E:\cygwin\etc\skel.bash_profile拷贝到该文件夹下)。&lt;/p&gt;

&lt;p&gt;(2)打开bash_profile文件，添加NDK=/cygdrive/&lt;你的盘符&gt;/&lt;android ndk=&quot;&quot; 目录=&quot;&quot;&gt; 例如：NDK=/cygdrive/e/android-ndk-r5&lt;/android&gt;&lt;/你的盘符&gt;&lt;/p&gt;

&lt;p&gt;export NDK&lt;/p&gt;

&lt;p&gt;NDK这个名字是随便取的，为了方面以后使用方便，选个简短的名字，然后保存&lt;/p&gt;

&lt;p&gt;(3)打开cygwin，输入cd $NDK，如果输出上面配置的/cygdrive/e/android-ndk-r5信息，则表明环境变量设置成功了。&lt;/p&gt;

&lt;p&gt;5、用NDK来编译程序&lt;br /&gt;
1、 现在我们用安装好的NDK来编译一个简单的程序吧，我们选择ndk自带的例子hello-jni，我的位于E:\android-ndk-r7\samples\hello-jni(根据你具体的安装位置而定)，&lt;/p&gt;

&lt;p&gt;2、 运行cygwin，输入命令cd /cygdrive/e/android-ndk-r7/samples/hello-jni，进入到E:\android-ndk-r7\samples\hello-jni目录。&lt;/p&gt;

&lt;p&gt;3、 输入$NDK/ndk-build，执行成功后，它会自动生成一个libs目录，把编译生成的.so文件放在里面。($NDK是调用我们之前配置好的环境变量，ndk-build是调用ndk的编译程序)&lt;/p&gt;

&lt;p&gt;4、 此时去hello-jni的libs目录下看有没有生成的.so文件，如果有，你的ndk就运行正常啦！&lt;/p&gt;

&lt;p&gt;5、用cygwin编译我们产生的工程&lt;/p&gt;

&lt;p&gt;用cygwin cd进入到Cocos2d-x的projects找到刚才创建的项目MyGame，进入proj.android执行./build_native.sh，编译完成后打开Eclipse将项目导入用模拟器运行。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;由于过程比较复杂，本文仅讲述了比较重要的一些步骤，一些安装细节未做描述，如有不明白请留言或查阅other资料，谢谢！&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/31.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/31.html</guid>
        
        <category>cocos2d-x</category>
        
      </item>
    
      <item>
        <title>ThinkPHP连续插入数据时的BUG</title>
        <description>&lt;p&gt;今天在使用Thinkphp的时候发现一个BUG，我需要往表里连续插入数据，结果发现中间某一条数据(A数据)如果验证不通过，后面正确的数据也不能插入，并且出错的信息与A数据都相同，查看源码后发现Model.class.php中autoValidation函数末有这样一代码片段&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 批量验证的时候最后返回错误&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于模型对象已经被处理为了单例，这里的出错信息将是A数据的出错信息，下一条数据(正确的一条数据)验证时这里并未释放A数据的出错信息，这里将直接判定为false造成逻辑错误，我理解的是这样。修改方法是在autoValidation开始时加上$this-&amp;gt;error = null先进行释放，这样完美解决了。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Mar 2014 00:00:00 +0800</pubDate>
        <link>http://xiajie.me/posts/30.html</link>
        <guid isPermaLink="true">http://xiajie.me/posts/30.html</guid>
        
        <category>php</category>
        
      </item>
    
  </channel>
</rss>
